//>> ПЕРЕМЕННЫЕ
// все текстовые
joe="Joe"
x=3
y=5

//<< использование
echo "Holla $joe"

//<< арифметика
// нужно поместить в двойные скобки
new=$(($x+$y))

//>> ДОСТУПНЫЕ ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ
$BASH - путь до терминала
$BASH_VERSION - версия
$HOME - путь к домашней папке
$HOSTNAME - имя компьютера
$HOSTTYPE - архитектура машины.
$RANDOM - случайное число от 0 до 32767
$OSTYPE - тип ОС
$PWD - текущий каталог
$UID - идентификатор пользователя запустившего скрипт
$USER - имя пользователя
$DIRSTACK - содержимое вершины стека каталогов
$EDITOR - текстовый редактор по умолчанию
$EUID - Эффективный UID. Если вы использовали программу su для выполнения команд от другого пользователя, то эта переменная содержит UID этого пользователя, в то время как...
$UID - ...содержит реальный идентификатор, который устанавливается только при логине.
$FUNCNAME - имя текущей функции в скрипте.
$GROUPS - массив групп к которым принадлежит текущий пользователь
$LC_CTYPE - внутренняя переменная, котороя определяет кодировку символов
$OLDPWD - прежний рабочий каталог
$OSTYPE - тип ОС
$PATH - путь поиска программ
$PPID - идентификатор родительского процесса
$SECONDS - время работы скрипта(в сек.)
$# - общее количество параметров переданных скрипту
$* - все аргументы переданыне скрипту(выводятся в строку)
$@ - тоже самое, что и предыдущий, но параметры выводятся в столбик
$! - PID последнего запущенного в фоне процесса
$$ - PID самого скрипта

//>> ЗАПРОС НА ВВОД ДАННЫХ ПОЛЬЗОВАТЕЛЯ
echo -n "Как вас зовут" // -n типа в той же строке
read name
echo "Привет $name"

//>> ПАРАМЕТРЫ
// исполняемому скрибту могу передать параметры
// от одного до 9 получаем синтаксисом $n
// все остальные $[n]

// например расчет выражения с двумя числами
echo "$(($1 $2 $3))"

// запуск
bash script.sh 5 + 6

//>> IF
// операции
// -lt - меньше
// -gt - больше
// -le - меньше либо равно
// -ge - больше либо равно
// -eq - равно

// все пробелы важны
#!/bin/bash
echo "Введите возраст"
read age
if [[ $age -gt 50 ]] || [[ $age -eq 50 ]]; then
        echo "Да ты пердун старый"
    elif [[ $age -gt 10 ]] && [[ $age -lt 50 ]]; then
        echo "Да ты в самом рассвете сил"
    else
        echo "Да ты мальчик"
fi

//>> CASE
#!/bin/bash
echo "Введите бренд"
read brand
case $brand in
    samsung)
        echo "samsung"
    nokia)
        echo "nokia"
    lg)
        echo "lg"
    *)
        echo "shit"
esac

//>> МАССИВЫ
// массивы могут содержать как числа так и строки
#!/bin/bash

//<< создание массива
Arr=(2 5 4)
Arr2=(3 string another 6)

//<< первый элемент
echo ${Arr}

//<< все элементы
echo ${Arr2[@]}

//<< вывести индексы
echo ${!Arr[@]}
echo ${!Arr2[@]}

//<< доступ к конкретным элементам
echo ${Arr[2]}
echo ${Arr2[0]}

//<< сколько элементов
echo ${#Arr[@]}
echo ${#Arr2[@]}

//<< количество символов в элементе
echo ${#Arr[1]}
echo ${#Arr2[2]}

//<< добавление в массив
Arr[3]=fourth
    
//>> ИТЕРАЦИЯ ПО МАССИВАМ
#!/bin/bash
Arr=(2 5 88 4)
for i in ${!Arr[@]}; do
    echo "${Arr[$i]}";   // здесь ковычки можно опустить, должно заканчиваться на ;
done

//>> ЦИКЛЫ
//<< for in
for i in 1 2 3; do
    echo $i;   // здесь должно заканчиваться на ;
done

//<< классический
for ((i=0; i<10; i++)); do
    echo $i;   
done

//<< do while
n=1
while [ $n -lt 4 ]; do
    echo $n;
    n=$(( $n+1 ));
done

//>> ФУНКЦИИ
list_files(){
    echo "Вывожу содержимое папки"
    cd Input
    ls;
}
list_files

//>> УПРАВЛЕНИЕ ПОТОКАМИ
// > - перенаправить поток вывода и перезаписать
// >> - перенаправить воток вывода и добавить запись не перетирая старые
// < - перенаправить поток ввода и перезаписать
// << - перенаправить воток ввода и добавить запись не перетирая старые

//>> ПОИСК ФАЙЛОВ И КОНВЕРТАЦИЯ В Output
#!/bin/bash
cd Input
for file in `find . -type f -name "*.MP4"`
do
   input=$(basename "$file" )
   output=""../Output/$(basename "$file" \.MP4 )".mov"

   echo "$input $output"
   ffmpeg -i $input -c:v dnxhd -profile:v dnxhr_hq -pix_fmt yuv422p -c:a copy $output
done