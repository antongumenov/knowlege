global
function replaceInType(str) {
    repArr = [
        { sym: /:i8/g, rep: " int8" },
        { sym: /:i1/g, rep: " int16" },
        { sym: /:i3/g, rep: " int32" },
        { sym: /:i6/g, rep: " int64" },
        { sym: /:i/g, rep: " int" },
        { sym: /:f3/g, rep: " float32" },
        { sym: /:f/g, rep: " float64" },
        { sym: /:s/g, rep: " string" },
        { sym: /:b/g, rep: " bool" },
        { sym: /:r/g, rep: " rune" },
        { sym: /:e/g, rep: " error" },
        { sym: /\[/g, rep: " [" },
        { sym: /\] /g, rep: "]" },
        { sym: /:m \[ /g, rep: " map[" },
        { sym: /,/g, rep: ", " },
        { sym: /\( /g, rep: "\(" },
        { sym: /^ /g, rep: "" },
    ]
    repArr.forEach(el => {
        str = str.replace(el.sym, el.rep)
    });

    return str
}

function replaceRetType(str) {    
    if (!str){
        return ''
    }
    if (str.split(",").length>1){
        str= "(" + str + ")"
        str= str.replace("( ","(")
        str= str.replace(",  ",", ")
        return str
    }else if (str.split(",").length=1){
        str= str.replace(" ","")
        return str
    }
        
    return ''    
}
endglobal

// func
snippet `ff ([A-Za-z0-9]+) ([A-Za-z0-9\[\]\{\}\(\):,]*) ([A-Za-z0-9\[\]\{\}\(\):,]*) ` "meth: me (name) (name_type,name_type) (_type,_type) " A
func ``rv = m[1]``(``rv = replaceInType(m[2])``) ``rv = replaceRetType(replaceInType(m[3]))``{
    $0
}
endsnippet

//struct
snippet `([A-Za-z0-9]+);s` A
type ``rv = m[1]`` struct{
    $0
}
endsnippet

//method
snippet `mm ([A-Za-z0-9]+) ([A-Za-z0-9]+) ([A-Za-z0-9\[\]\{\}\(\):,]*) ([A-Za-z0-9\[\]\{\}\(\):,]*) ` "meth: me (resiver) (name) (name_type,name_type) (_type,_type) " A
func (r *``rv = m[1]``) ``rv = m[2]``(``rv = replaceInType(m[3])``) ``rv = replaceRetType(replaceInType(m[4]))``{
    $0
}
endsnippet

// interface
snippet `([A-Za-z0-9]+);i` A
type ``rv = m[1]`` interface{
    $0
}
endsnippet

//for range Arr 
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);fa` A
for idx, el:=range ``rv = replaceInType(m[1])`` {
    $0
}
endsnippet

//for range Arr just el
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);fe` A
for _, el:=range ``rv = replaceInType(m[1])`` {
    $0
}
endsnippet

//for range Arr just ind
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);fi` A
for idx:=range ``rv = replaceInType(m[1])`` {
    $0
}
endsnippet

//for range Map 
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);fm` A
for key, val:=range ``rv = replaceInType(m[1])`` {
    $0
}
endsnippet

//for range Map just val
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);fv` A
for _, val:=range ``rv = replaceInType(m[1])`` {
    $0
}
endsnippet

//for range Map just key
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);fk` A
for key:=range ``rv = replaceInType(m[1])`` {
    $0
}
endsnippet

//check map 
snippet `([A-Za-z0-9]+) ([A-Za-z0-9]+);mv` A
val, ok:=``rv = m[1]``[``rv = m[2]``]
endsnippet

//check map ok
snippet `([A-Za-z0-9]+) ([A-Za-z0-9]+);mo` A
_, ok:=``rv = m[1]``[``rv = m[2]``]
endsnippet

//make  ----------------------------------------------------------------------------------------------
snippet `([A-Za-z0-9]+) ([A-Za-z0-9\[\]\{\}\(\):,\.]*);mk` "name type,len,cap;mk" A
``rv = m[1]`` := make(``rv = replaceInType(m[2])``)
endsnippet

//make var short
snippet `([A-Za-z0-9_]+);;` A
``rv = m[1]`` := $0
endsnippet

//make var long
snippet `([A-Za-z0-9\[\]\{\}\(\):,\.]*);v` "name:type;v" A
var ``rv = replaceInType(m[1])`` $0
endsnippet

//coment //
snippet `([A-Za-z0-9А-Яа-я\[\]\{\}\(\):#,\. -]+)/ ` "coment/ " A
// ``rv = replaceInType(m[1])`` $0 
endsnippet

//coment //>>
snippet `([A-Za-z0-9А-Яа-я\[\]\{\}\(\):#,\. -]+)// ` "coment// " A
//>> ``rv = replaceInType(m[1])`` $0
endsnippet

//coment //<<
snippet `([A-Za-z0-9А-Яа-я\[\]\{\}\(\):#,\. -]+)/// ` "coment/// " A
//<< ``rv = replaceInType(m[1])`` $0
endsnippet