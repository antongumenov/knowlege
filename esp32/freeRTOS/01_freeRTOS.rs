//_ ОПЕРАЦИОННАЯ СИСТЕМА freeRTOS
//~ дает возможности
// tasks - задачи(потоки) 
// queues - очереди
// sinaphores - симафоры
// mutex - мьютексы
// system timers - таймеры
// co-rutines - как горутины в go 

//_ КАК ЭТО РАБОТАЕТ НА esp32 в ISP IDE
// при программировании микроконтроллера
// я не имею доступа к функции main
// под капотом esp-ide создает ее сам
// создает главную задачу с приоритетом 1
// добавляет ее в планировщик и запускает ее
// с этого момента программа никогда не попадет в функцию main
// пока мк не перезапустится

//_ КАК РАБОТАЕТ ПЛАНИРОВЩИК
// он работает повторяющимися периодами называемыми тиками
// 1 тик = configTICK_RATE_HZ
// в каждый период он запускает одну задачу, 
// потом возвращается в себя и смотрит какую задачу ему запустить дальше

// если в поланировщике только одна задача (вначале это основная задача)
// то планировщик будет бекать от нее к себе и обратно к ней

// задачи могут иметь приоритет

//~ управление задачами с равным приоритетом
// планировщик запускает задачи с одинаковым приоритетом по очереди
// выделяя кусочек времени для каждой
// запущенная имеет статус run
// готовая к работе имеет статус ready
// если у задачи забрали процессорное время или она ждет очередь, мьютекс или симафор - статус wait
// если задачу заморозили - статус suspend
// если востановили то ее статус опять ready

//~ управление задачами с разными приоритетами
// если создать две задачи с разными приоритетами
// задача с меньшим приоритетом никогда не запустится
// на практике, так никогда не делают
// как правила всегда крутится задача с низким приоритетом
// и создаются задачи с более высоким приоритетом
// которые всегда весят в состоянии wait
// пока их не разбудят по какому то событию
// например кидаем ее в сон по таймеру, по завершению она проснется 
// или они улетают в сон ожидая симафоры, очереди событий и тд.
// и по прерыванию мы кидаем симафоры или события и они пробуждаются
// пробуждаясь они сразу занимают место в планировщике 
// и выполняются так как имеют более высокий приоритет 
// по сравнению c низкоуровневыми задачами   

