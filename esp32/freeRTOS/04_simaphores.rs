//_ УПРАВЛЕНИЕ ПРЕРЫВАНИЯМИ С ПОМОЩЬЮ СИМАФОРОВ
//~ что такое симафор
// это как очередь только с 1 значением
// передатчик так же имеет низкий приоритет
// получатель более высокий 
// передасчик как отдал, блокируется, так как семафор занят
// получател как только передатчик отдал просыпается 
// делает свое дело и засыпает, пока опять не поступит значение

//~ создание симафора
// семафор реализован на макросах, 
// по этому значение в него нужно передавать по значению а не по ссылке

//_ БИНАРНЫЕ СИМАФОРЫ
// используются для синхронизации
// там произошло, тут сделай
// для не частых событий
vSemaphoreCreateBinary(тип семафора)
// vSemaphoreCreateBinary( xBinarySemaphore );
// xBinarySemaphore - используется как имя симафора

//~ принцип работы 
// в перрывании нужно отдать симафор
// а в задаче взять

//~ отдача симафора из другой задачи
xSemaphoreGive(симафор, *разбудил_более_приоритетную_задачу)
// возвращает 
pdPASS - если симафор можно воткнуть
pdFALSE - если нет места воткнуть семафор

// разбудить_более_приоритетную_задачу - это параметр в который попадет значение
// которое говорит имеет ли задача которая ждет симафор выше приоритет чем прерванная по прерыванию
// если да то возможно нужно сделать 
portSWITCH_CONTEXT();
//~ отдача симафора в прерывании
xSemaphoreGiveFromISR(симафор, *разбудил_более_приоритетную_задачу)
// возвращает 
pdPASS - если симафор можно воткнуть
pdFALSE - если нет места воткнуть семафор

// разбудить_более_приоритетную_задачу - это параметр в который попадет значение
// которое говорит имеет ли задача которая ждет симафор выше приоритет чем прерванная по прерыванию
// если да то возможно нужно сделать 
portSWITCH_CONTEXT();

//~ получение симафора в задаче
xSemaphoreTake(симафор, сколько_тиков_подождать_симафор)
// возвращает 
pdPASS - если симафор получен
pdFALSE - если симафор недоступен
// если сколько_тиков_подождать_симафор = portMAX_DELAY
// то задача проснется только когда получим симафор 
// но только если FreeRTOSConfig.h INCLUDE_vTaskSuspend установлена в 1.
// так можно делать, чтобы не проверять возврат и уменьшить код

//_ СИМАФОРЫ СО СЧЕТЧИКОМ
// может случиться такое, что обработчик взявший симафорс собития его еще не обработал
// и тут может произойти еще например два события
// одно прерывание поместит симафор в свободное место
// а второе прерывание не сможет этого сделать и факт события потеряется
// для кнопки это не кретично, а если нужно зафиксировать все события
// для этого используется симафор со счетчиком

//~ суть
// та эе очередь только без данных

//~ создание
xSemaphoreCreateCounting(максимальное_занчение, начальное значение)
// возвращает симафор
// xCountingSemaphore = xSemaphoreCreateCounting( 10, 0 );
