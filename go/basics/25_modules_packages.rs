//_ МОДУЛИ
// перваначальная цель создания модуля 
// это подготовка кода к публикации
// но есть доп бонусы
// создав модуль проще запускать всего лишб одной командой
//  и подтягивать зависимости
// каждый раз создавая проект нужно создавать модуль
// делается это командой 
go mod init project_name.ru

// после чего создается файл go.mod
// в котором описываются версии и зависимости

//_ ПАКЕТЫ
// служат для роазделения кода
// в одной папке могут лежать только файлы одного пакета
// в каждом файле должен быть обьявлен пакет
package store

//_ ПРОГРАММНЫЕ И БИБЛИОТЕЧНЫЕ ПАКЕТЫ
// програмными принято называть пакеты с именем main
// библиотечными все остальные

//_ ИМЕНОВАНИЕ
// все импортируемые из пакета сущности 
// должны иметь имена наинающиеся с большой буквы

// все сущности с иманами с маленькой буквы
// являются приватными и могут использоваться только внутри пакета

//_ ИМПОРТ
//~ простой импорт
import (
    "fmt"
    "packages/store"
) 

// доступ производится по имени пакета
product := store.Product {
    Name: "Kayak",
    Category: "Watersports",
}

//~ импорт с псевданимом
import (
    "fmt"
    prod "packages/store"
)

// доступ производится по имени псевданима
product := prod.Product {
    Name: "Kayak",
    Category: "Watersports",
}

//~ точечный импорт
// позволяет использовать имена без префикса пакетов
// не надо так делать
import (
    "fmt"
    . "packages/store"
)

// доступ производится напрямую
product := Product {
    Name: "Kayak",
    Category: "Watersports",
}

//_  ПЕРЕМЕННЫЕ ВНУТРИ ПАКЕТА
// переменная обьявленная в любом файле пакета доступна в любом другом файле пакета

//_ ИНИЦИАЛИЗАЦИЯ ПАКЕТА
// в любом пакете можно обьявить функцию Init
// она запускается при импорте пакета
// в ней можно подготовить пакет к работе
// здесь можно например прочитать конфиги 
func init(){}

//! если объявить переменные на уровне пакета, то init будет запущена после их инициализации
//! и их можно будет использовать в функции инициализации

// эту функцию нельзя вызвать напрямую
// и в одном файле таких функций может быть сколько угодно
// все они запустятся поочереди
//! ВСЕ ФУНКЦИИ init ДОЛЖНЫ БЫТЬ НЕЗАВИСИМЫМИ ДРУГ ОТ ДРУГА
//! ПОТОМУ ЧТО ПОРЯДОК ИХ ЗАПУСКА ТЯЖЕЛО ОПРЕДЕЛИТЬ

//~ использование только функции инициализации
// если я хочу запустить тольок функцию инициализации 
// и не использовать юольше не чего
// импортировать пакет нужно так
import _ "packages/data"

//_ ПОРЯДОК ИНИЦИАЛИЗАЦИИ ПАКЕТОВ
// всегда вначале импортируюеся зависимости
// зависимости зависимостей
// константы зависимостей
// переменные уровня пакетов зависимостей
// вызывается функция init
// так все идет до програмного пакета
// затем константы программного пакета
// переменные программного пакета
// функция init программного пакета
// функция main программного пакета

//_ ИСПОЛЬЗОВАНИЕ ВНЕШНИХ ПАКЕТОВ
// подключаем с помощью go get
// со следующих ресурсов
// https://pkg.go.dev
// https://github.com/golang/go/wiki/Projectsы
go get github.com/fatih/color@v1.10.0

// при этом можно добавить две версии пакета
// го будет использовать последнюю

// пакет добавится в go.mod
require (
    github.com/fatih/color v1.10.0 // indirect
)

// indirect - означает что не один из пакетов проекта не использует этот пакет

//~ подключение
// с помощью алиасов можно подключать разные версии пакетов
import "github.com/fatih/color"
import color1 "github.com/fatih/color"
import color1 "github.com/fatih/color"

//_ УДАЛЕНИЕ ВНЕШНЕГО ПАКЕТА
// удаляю все импорты и делаю
go mod tidy

//_ ВЕНДОРИНГ
// если я хочу чтоб мои внешние пакеты лежали у меня в корне проекта

//~ первый вариант
// добавляю импорты
import (
	_ "github.com/lib/pq"
	_ "github.com/mattn/go-sqlite3"
)

// качаю
go mod tydy

// создаю папку vendor и кладу туда пакеты
// попадет только то что используется в коде
go mod vendor

//~ второй вариант
// качаю
go get github.com/lib/pq
go get github.com/mattn/go-sqlite3

// использую
import (
	_ "github.com/lib/pq"
	_ "github.com/mattn/go-sqlite3"
)

// вендорю
go mod vendor

// утрясаю
go mod tydy

