//_ МЬЮТЕКСЫ
// это тип данных
// который позволяет заблокировать доступ к расшариваемым данным 
// в других горутинах
// в момент их исползования в нужном канале
// все горутины заблокируются пока данные не будут разлочены

//~ типы
// есть два вида мьютексов
// mutex
// RWmutex

//_ MUTEX
// блокирует данные не зависимо от операции(чтение или запись)

// создаю общий ресурс
var counter int = 0    

// определяем мьютекс
var mutex sync.Mutex        

// запускаю несколько горутин передавая мьютекс
for i := 1; i < 5; i++{
    go work(&mutex)  
}

func work (number int, ch chan bool, mutex *sync.Mutex){
    mutex.Lock()    // блокируем доступ к переменной counter
    counter++       // изменяю общий ресурс 
    mutex.Unlock()  // разблокирую для других горутин
}

//! ВАЖНО нужно убедиться, что весь код обращается к одним и тем же данным
//! иначе может быть гонка данных

//_ RWMUTEX
// в отличии от MUTEX не просто блокирует данные 
// а можно выбрать тип блокировки 
// на запись или на чтение

//~ методы
// RLock() - пытается получить блокировку на чтение, поток будет заблокированн пока она не будет получена
// RUnlock() - снимает блокировку чтения
// Lock() - пытается получить блокировку на запись, поток будет заблокированн пока она не будет получена
// Unlock() - снимает блокировку на запись
// RLocker() - возвращает указатель на Locker(кто заблокировал), для получения и снятия блокировки, для координации горутин по условию

//! ПРАВИЛА
// если RWMutex разблокирован, 
// то и читатель и писатель могут получить блокировку

// если RWMutex заблокирован на чтение, 
// то любой читатьель может получить блокировку
// поток будет заблокирован пока все читатели не стнимут блокировку

// если RWMutex заблокирован на запись, то никто не сможет получит доступ
// пока блокировка не будет снята

// если RWMutex заблокирован на чтение, и кто то просит бллокировке на запись
// никто не сможет получить блокировку
// когда читатель разблокирует RWMutex, блокировку полусит писатель
// это предотвращает бесконечную блокировку читателями

//_ ЗАЩИЩЕННЫЕ СТРУКТУРЫ
// я могу положить Mutex или RWMutex в структуру
// и лочить данные структуры которые мне нужны

type Person struct{
    i int
    m sync.Mutex
}

func (p *Person)Inc(){
    p.m.Lock()
    defer p.m.Unlock()
    a.i++
}