//>> ОДНОКРАТНОЕ ВЫПОЛНЕНИЕ ФУНКЦИИ
// когда у меня есть данные которые нужно подготовить один раз
// и когда есть функции которые используют эти данные
// и соответственно должны подождать пока они не приготовятся
// и когда подготовка данных не обязательно должна быть в отдельной горутине
// я могу подготовить их в первой горутине, вызвав функцию которая их готовит
// но так как я не знаю какая горутина запустится первая
// мне прийдется в каждой горутине запускать приготовление данных
// и чтобы не городить проверки
// можно просто использовать sync.Once
// которая имеет метод Do(func), который принимает функцию
// и сразу запускает ее только один раз

// создаю sync.Once
var once = sync.Once{}

// и расшариваемые данные
var squares = map[int]int{}

// функция подготовки значений
func generateSquares(max int) {
}

// функция использующая значения
func readSquares(id, max, iterations int) {
	// сколько бы раз не запустилась бы эта функция
	// генерировать значения будем один раз и сохранятся
	once.Do(func() {
		generateSquares(max)
	})
	// ткт че нибудь делаю с этими даными
}
func main() {
	for i := 0; i < 5; i++ {
		go readSquares(i, 10, 5)
	}
}